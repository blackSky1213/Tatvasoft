#pragma checksum "C:\Users\kbsar\source\repos\HelperLand\HelperLand\Views\Customer\BookService.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8b1d6a83bc0f71f488c580012d76cef6b33ca215"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Customer_BookService), @"mvc.1.0.view", @"/Views/Customer/BookService.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\kbsar\source\repos\HelperLand\HelperLand\Views\_ViewImports.cshtml"
using HelperLand;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\kbsar\source\repos\HelperLand\HelperLand\Views\_ViewImports.cshtml"
using HelperLand.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8b1d6a83bc0f71f488c580012d76cef6b33ca215", @"/Views/Customer/BookService.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"792c06a17c9f5c83ca6617eee99384b5ffd85ea5", @"/Views/_ViewImports.cshtml")]
    public class Views_Customer_BookService : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString("#"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", "_ValidationScriptsPartial", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\kbsar\source\repos\HelperLand\HelperLand\Views\Customer\BookService.cshtml"
  
    ViewData["Title"] = "BookService";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8b1d6a83bc0f71f488c580012d76cef6b33ca2154898", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"" />
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />

    <link rel=""preconnect"" href=""https://fonts.googleapis.com"" />
    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin />
    <link href=""https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap""
          rel=""stylesheet"" />
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css""
          rel=""stylesheet""
          integrity=""sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC""
          crossorigin=""anonymous"" />
    <link rel=""stylesheet""
          href=""https://pro.fontawesome.com/releases/v5.10.0/css/all.css""
          integrity=""sha38");
                WriteLiteral(@"4-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p""
          crossorigin=""anonymous"" />
    <link rel=""stylesheet"" href=""/css/bookServiceStyle.css"" />
    <link rel=""stylesheet"" href=""/css/commonStyle.css"" />
    <link rel=""stylesheet"" href=""/css/loading.css"" />
    <title>Book service</title>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8b1d6a83bc0f71f488c580012d76cef6b33ca2157293", async() => {
                WriteLiteral("\r\n    ");
#nullable restore
#line 32 "C:\Users\kbsar\source\repos\HelperLand\HelperLand\Views\Customer\BookService.cshtml"
Write(await Html.PartialAsync("Navbar2"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
    <section id=""header"" class=""p-boader"">
        <img class=""header-img"" src=""/image/book-service-banner.jpg"" />
    </section>

    <section id=""setup-service"">
        <h2>Set up your cleaning service</h2>
        <div class=""diveder"">
            <span class=""line""></span><img src=""/image/separator.png"" alt=""diveder"" /><span class=""line""></span>
        </div>

        <div class=""setup"">
            <div class=""setup-left"">
                <div class=""setup-options"">
                    <ul>
                        <li id=""1"" class=""add add-color"" onclick=""form1()"">
                            <img id=""img1""
                                 src=""/image/setup-service-white.png""
                                 alt=""setupService"" />
                            <span> Setup Service </span>
                        </li>
                        <li id=""2"" onclick=""form2()"">
                            <img id=""img2"" src=""/image/schedule.png"" alt=""schedule"" />
                         ");
                WriteLiteral(@"   <span>Schedule & Plan</span>
                        </li>
                        <li id=""3"" onclick=""form3()"">
                            <img id=""img3"" src=""/image/details.png"" alt=""details"" />
                            <span>Your Details</span>
                        </li>
                        <li id=""4"" onclick=""form4()"">
                            <img id=""img4"" src=""/image/payment.png"" alt=""make payment"" />
                            <span>Make Payment</span>
                        </li>
                    </ul>
                </div>

");
                WriteLiteral("                ");
#nullable restore
#line 69 "C:\Users\kbsar\source\repos\HelperLand\HelperLand\Views\Customer\BookService.cshtml"
           Write(await Html.PartialAsync("setupService"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n\r\n\r\n");
                WriteLiteral("\r\n                ");
#nullable restore
#line 74 "C:\Users\kbsar\source\repos\HelperLand\HelperLand\Views\Customer\BookService.cshtml"
           Write(await Html.PartialAsync("scheduleService"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n\r\n");
                WriteLiteral("\r\n                ");
#nullable restore
#line 78 "C:\Users\kbsar\source\repos\HelperLand\HelperLand\Views\Customer\BookService.cshtml"
           Write(await Html.PartialAsync("AddressDetails"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n\r\n");
                WriteLiteral("\r\n                ");
#nullable restore
#line 82 "C:\Users\kbsar\source\repos\HelperLand\HelperLand\Views\Customer\BookService.cshtml"
           Write(await Html.PartialAsync("payment"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"

            </div>
            <div class=""setup-right"">
                <div class=""price-card"">
                    <h3>Payment Summary</h3>
                    <div class=""details"">
                        <p>01/01/2018  4:00 pm </p>
                    </div>
                    <h4>Duration</h4>
                    <div class=""duration"">
                        <p>Basic <span class=""d-none extra1"">Inside Cabinet (extra)</span><span class=""d-none extra2"">Inside Fridge (extra)</span><span class=""d-none extra3"">Inside Oven (extra)</span><span class=""d-none extra4"">Laundry Wash & Dry (extra)</span><span class=""d-none extra5"">Interior Windows (extra)</span></p>
                        <p style=""text-align: right""><span class=""duration-print"">3 Hrs</span><span class=""d-none extra1"">30 Mins</span><span class=""d-none extra2"">30 Mins</span><span class=""d-none extra3"">30 Mins</span><span class=""d-none extra4"">30 Mins</span><span class=""d-none extra5"">30 Mins</span></p>
                    </div>
  ");
                WriteLiteral(@"                  <div class=""cover"">
                        <div class=""totalhour"">
                            <span><strong>Total Service Time</strong></span>
                            <span class=""TotalHour""><strong>3.5 Hrs</strong></span>
                        </div>
                    </div>
                    <div class=""cover"">
                        <div class=""pay-list"">
                            <p>Per cleaning </p>
                            <p style=""text-align: right"">
                                <strong class=""PerCleanPay"">$87</strong>
                            </p>
                        </div>
                    </div>
                    <div class=""pay-list totalPay"">
                        <p>
                            <span style=""color: #1d7a8c; font-size: 20px; padding-bottom: 11px"">Total Payment</span>

                        </p>
                        <p style=""text-align: right"">
                            <strong class=""PerCleanPay"" styl");
                WriteLiteral(@"e=""color: #1d7a8c; font-size: 42px"">$63</strong>
                        </p>
                    </div>


                    <div class=""seeWhatInclude"">
                        <p>
                            <img style=""margin-bottom: 5px; margin-right: 5px""
                                 src=""/image/smiley.png""
                                 alt=""smile"" />
                            See what is always included
                        </p>
                    </div>
                </div>
                <h3 class=""question"">Questions?</h3>
                <div class=""accordion"" id=""accordionExample"">
                    <div class=""accordion-item question-list"">
                        <h2 class=""accordion-header"" id=""headingOne"">
                            <button class=""accordion-button""
                                    type=""button""
                                    data-bs-toggle=""collapse""
                                    data-bs-target=""#collapseOne""
            ");
                WriteLiteral(@"                        aria-expanded=""true""
                                    aria-controls=""collapseOne"">
                                <img class=""right-icon""
                                     src=""/image/keyboard-right-arrow-button-copy.png""
                                     alt=""right"" />
                                Which Helperland professional will come to my place?
                            </button>
                        </h2>
                        <div id=""collapseOne""
                             class=""accordion-collapse collapse""
                             aria-labelledby=""headingOne""
                             data-bs-parent=""#accordionExample"">
                            <div class=""accordion-body"">
                                <strong>This is the first item's accordion body.</strong> It
                                is shown by default, until the collapse plugin adds the
                                appropriate classes that we use to style each e");
                WriteLiteral(@"lement. These
                                classes control the overall appearance, as well as the showing
                                and hiding via CSS transitions. You can modify any of this
                                with custom CSS or overriding our default variables. It's also
                                worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>, though the transition does limit
                                overflow.
                            </div>
                        </div>
                    </div>
                    <div class=""accordion-item question-list"">
                        <h2 class=""accordion-header"" id=""headingTwo"">
                            <button class=""accordion-button collapsed""
                                    type=""button""
                                    data-bs-toggle=""collapse""
                                    data-bs-target=""#collapseTwo""
             ");
                WriteLiteral(@"                       aria-expanded=""false""
                                    aria-controls=""collapseTwo"">
                                <img class=""right-icon""
                                     src=""/image/keyboard-right-arrow-button-copy.png""
                                     alt=""right"" />
                                Which Helperland professional will come to my place?
                            </button>
                        </h2>
                        <div id=""collapseTwo""
                             class=""accordion-collapse collapse""
                             aria-labelledby=""headingTwo""
                             data-bs-parent=""#accordionExample"">
                            <div class=""accordion-body"">
                                <strong>This is the second item's accordion body.</strong> It
                                is hidden by default, until the collapse plugin adds the
                                appropriate classes that we use to style each");
                WriteLiteral(@" element. These
                                classes control the overall appearance, as well as the showing
                                and hiding via CSS transitions. You can modify any of this
                                with custom CSS or overriding our default variables. It's also
                                worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>, though the transition does limit
                                overflow.
                            </div>
                        </div>
                    </div>
                    <div class=""accordion-item question-list"">
                        <h2 class=""accordion-header"" id=""headingThree"">
                            <button class=""accordion-button collapsed""
                                    type=""button""
                                    data-bs-toggle=""collapse""
                                    data-bs-target=""#collapseThree""
       ");
                WriteLiteral(@"                             aria-expanded=""false""
                                    aria-controls=""collapseThree"">
                                <img class=""right-icon""
                                     src=""/image/keyboard-right-arrow-button-copy.png""
                                     alt=""right"" />
                                Which Helperland professional will come to my place?
                            </button>
                        </h2>
                        <div id=""collapseThree""
                             class=""accordion-collapse collapse""
                             aria-labelledby=""headingThree""
                             data-bs-parent=""#accordionExample"">
                            <div class=""accordion-body"">
                                <strong>This is the third item's accordion body.</strong> It
                                is hidden by default, until the collapse plugin adds the
                                appropriate classes that we use to");
                WriteLiteral(@" style each element. These
                                classes control the overall appearance, as well as the showing
                                and hiding via CSS transitions. You can modify any of this
                                with custom CSS or overriding our default variables. It's also
                                worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>, though the transition does limit
                                overflow.
                            </div>
                        </div>
                    </div>
                    <div class=""accordion-item question-list"">
                        <h2 class=""accordion-header"" id=""headingThree"">
                            <button class=""accordion-button collapsed""
                                    type=""button""
                                    data-bs-toggle=""collapse""
                                    data-bs-target=""#collapseFour");
                WriteLiteral(@"""
                                    aria-expanded=""false""
                                    aria-controls=""collapseFour"">
                                <img class=""right-icon""
                                     src=""/image/keyboard-right-arrow-button-copy.png""
                                     alt=""right"" />
                                Which Helperland professional will come to my place?
                            </button>
                        </h2>
                        <div id=""collapseFour""
                             class=""accordion-collapse collapse""
                             aria-labelledby=""headingFour""
                             data-bs-parent=""#accordionExample"">
                            <div class=""accordion-body"">
                                <strong>This is the third item's accordion body.</strong> It
                                is hidden by default, until the collapse plugin adds the
                                appropriate classes that we");
                WriteLiteral(@" use to style each element. These
                                classes control the overall appearance, as well as the showing
                                and hiding via CSS transitions. You can modify any of this
                                with custom CSS or overriding our default variables. It's also
                                worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>, though the transition does limit
                                overflow.
                            </div>
                        </div>
                    </div>
                    <div class=""accordion-item question-list"">
                        <h2 class=""accordion-header"" id=""headingThree"">
                            <button class=""accordion-button collapsed""
                                    type=""button""
                                    data-bs-toggle=""collapse""
                                    data-bs-target=""#colla");
                WriteLiteral(@"pseFive""
                                    aria-expanded=""false""
                                    aria-controls=""collapseFive"">
                                <img class=""right-icon""
                                     src=""/image/keyboard-right-arrow-button-copy.png""
                                     alt=""right"" />
                                Which Helperland professional will come to my place?
                            </button>
                        </h2>
                        <div id=""collapseFive""
                             class=""accordion-collapse collapse""
                             aria-labelledby=""headingFive""
                             data-bs-parent=""#accordionExample"">
                            <div class=""accordion-body"">
                                <strong>This is the third item's accordion body.</strong> It
                                is hidden by default, until the collapse plugin adds the
                                appropriate classes ");
                WriteLiteral(@"that we use to style each element. These
                                classes control the overall appearance, as well as the showing
                                and hiding via CSS transitions. You can modify any of this
                                with custom CSS or overriding our default variables. It's also
                                worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>, though the transition does limit
                                overflow.
                            </div>
                        </div>
                    </div>
                    <div class=""accordion-item question-list"">
                        <h2 class=""accordion-header"" id=""headingThree"">
                            <button class=""accordion-button collapsed""
                                    type=""button""
                                    data-bs-toggle=""collapse""
                                    data-bs-target=");
                WriteLiteral(@"""#collapseSix""
                                    aria-expanded=""false""
                                    aria-controls=""collapseSix"">
                                <img class=""right-icon""
                                     src=""/image/keyboard-right-arrow-button-copy.png""
                                     alt=""right"" />
                                Which Helperland professional will come to my place?
                            </button>
                        </h2>
                        <div id=""collapseSix""
                             class=""accordion-collapse collapse""
                             aria-labelledby=""headingSix""
                             data-bs-parent=""#accordionExample"">
                            <div class=""accordion-body"">
                                <strong>This is the third item's accordion body.</strong> It
                                is hidden by default, until the collapse plugin adds the
                                appropriate class");
                WriteLiteral(@"es that we use to style each element. These
                                classes control the overall appearance, as well as the showing
                                and hiding via CSS transitions. You can modify any of this
                                with custom CSS or overriding our default variables. It's also
                                worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>, though the transition does limit
                                overflow.
                            </div>
                        </div>
                    </div>
                    <div class=""accordion-item question-list"">
                        <h2 class=""accordion-header"" id=""headingThree"">
                            <button class=""accordion-button collapsed""
                                    type=""button""
                                    data-bs-toggle=""collapse""
                                    data-bs-targ");
                WriteLiteral(@"et=""#collapseSeven""
                                    aria-expanded=""false""
                                    aria-controls=""collapseSeven"">
                                <p>
                                    <img class=""right-icon""
                                         src=""/image/keyboard-right-arrow-button-copy.png""
                                         alt=""right"" />
                                    Which Helperland professional will come to my place?
                                </p>
                            </button>
                        </h2>
                        <div id=""collapseSeven""
                             class=""accordion-collapse collapse""
                             aria-labelledby=""headingSeven""
                             data-bs-parent=""#accordionExample"">
                            <div class=""accordion-body"">
                                <strong>This is the third item's accordion body.</strong> It
                                is hi");
                WriteLiteral(@"dden by default, until the collapse plugin adds the
                                appropriate classes that we use to style each element. These
                                classes control the overall appearance, as well as the showing
                                and hiding via CSS transitions. You can modify any of this
                                with custom CSS or overriding our default variables. It's also
                                worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>, though the transition does limit
                                overflow.
                            </div>
                        </div>
                    </div>
                </div>
                <div style=""text-align: left; margin: 10px 0"">
                    <a class=""more-help""");
                BeginWriteAttribute("href", " href=\"", 20743, "\"", 20750, 0);
                EndWriteAttribute();
                WriteLiteral(">For more help</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <section id=\"newuser\">\r\n        <h3>GET OUR NEWSETTER</h3>\r\n        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8b1d6a83bc0f71f488c580012d76cef6b33ca21529286", async() => {
                    WriteLiteral("\r\n            <input class=\"newsetter\"\r\n                   type=\"email\"\r\n                   name=\"email\"\r\n                   placeholder=\"YOUR EMAIL\" />\r\n            <input type=\"submit\" class=\"btn-submit\" name=\"submit\" value=\"sumit\" />\r\n        ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    </section>

    <div id=""responsivePaySum"">
        <button type=""button""
                data-bs-toggle=""modal""
                data-bs-target=""#paymentSummaryModal"">
            Payment Summary
        </button>
    </div>

    <!-- PS modal starts -->

    <div class=""modal fade"" id=""paymentSummaryModal"" tabindex=""-1"">
        <div class=""modal-dialog modal-dialog-scrollable"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <h5 class=""modal-title"" id=""exampleModalLabel"">Payment Summary</h5>
                    <button type=""button""
                            class=""btn-close""
                            data-bs-dismiss=""modal""
                            aria-label=""Close""></button>
                </div>
                <div class=""modal-body Price-card"">
                    <div class=""details"">
                        <p>01/01/2018  4:00 pm </p>
                    </div>
                    <h4>Duration</h4>
      ");
                WriteLiteral(@"              <div class=""duration"">
                        <p>Basic <span class=""d-none extra1"">Inside Cabinet (extra)</span><span class=""d-none extra2"">Inside Fridge (extra)</span><span class=""d-none extra3"">Inside Oven (extra)</span><span class=""d-none extra4"">Laundry Wash & Dry (extra)</span><span class=""d-none extra5"">Interior Windows (extra)</span></p>
                        <p style=""text-align: right""><span class=""duration-print"">3 Hrs</span><span class=""d-none extra1"">30 Mins</span><span class=""d-none extra2"">30 Mins</span><span class=""d-none extra3"">30 Mins</span><span class=""d-none extra4"">30 Mins</span><span class=""d-none extra5"">30 Mins</span></p>
                    </div>
                    <div class=""cover"">
                        <div class=""totalhour"">
                            <span><strong>Total Service Time</strong></span>
                            <span><strong class=""TotalHour"">3.5 Hrs</strong></span>
                        </div>
                    </div>
         ");
                WriteLiteral(@"           <div class=""cover"">
                        <div class=""pay-list"">
                            <p>Per cleaning </p>
                            <p style=""text-align: right"">
                                <strong class=""PerCleanPay"">$87</strong>
                            </p>
                        </div>
                    </div>
                    <div class=""pay-list totalPay"">
                        <p>
                            <span style=""color: #1d7a8c; font-size: 20px; padding-bottom: 11px"">Total Payment</span>

                        </p>
                        <p style=""text-align: right"">
                            <strong class=""PerCleanPay"" style=""color: #1d7a8c; font-size: 42px"">$63</strong>
                        </p>
                    </div>


                    <div class=""seeWhatInclude"">
                        <p>
                            <img style=""margin-bottom: 5px; margin-right: 5px""
                                 src=""/image/smil");
                WriteLiteral(@"ey.png""
                                 alt=""smile"" />
                            See what is always included
                        </p>
                    </div>
                    <h2 class=""question"">Questions?</h2>
                    <div class=""accordion"" id=""accordionExample"">
                        <div class=""accordion-item question-list"">
                            <h2 class=""accordion-header"" id=""headingOne"">
                                <button class=""accordion-button""
                                        type=""button""
                                        data-bs-toggle=""collapse""
                                        data-bs-target=""#collapseOne""
                                        aria-expanded=""true""
                                        aria-controls=""collapseOne"">
                                    <img class=""right-icon""
                                         src=""/image/keyboard-right-arrow-button-copy.png""
                                       ");
                WriteLiteral(@"  alt=""right"" />
                                    Which Helperland professional will come to my place?
                                </button>
                            </h2>
                            <div id=""collapseOne""
                                 class=""accordion-collapse collapse""
                                 aria-labelledby=""headingOne""
                                 data-bs-parent=""#accordionExample"">
                                <div class=""accordion-body"">
                                    <strong>This is the first item's accordion body.</strong> It
                                    is shown by default, until the collapse plugin adds the
                                    appropriate classes that we use to style each element. These
                                    classes control the overall appearance, as well as the
                                    showing and hiding via CSS transitions. You can modify any
                                    of this w");
                WriteLiteral(@"ith custom CSS or overriding our default variables.
                                    It's also worth noting that just about any HTML can go
                                    within the <code>.accordion-body</code>, though the
                                    transition does limit overflow.
                                </div>
                            </div>
                        </div>
                        <div class=""accordion-item question-list"">
                            <h2 class=""accordion-header"" id=""headingTwo"">
                                <button class=""accordion-button collapsed""
                                        type=""button""
                                        data-bs-toggle=""collapse""
                                        data-bs-target=""#collapseTwo""
                                        aria-expanded=""false""
                                        aria-controls=""collapseTwo"">
                                    <img class=""right-icon""
       ");
                WriteLiteral(@"                                  src=""/image/keyboard-right-arrow-button-copy.png""
                                         alt=""right"" />
                                    Which Helperland professional will come to my place?
                                </button>
                            </h2>
                            <div id=""collapseTwo""
                                 class=""accordion-collapse collapse""
                                 aria-labelledby=""headingTwo""
                                 data-bs-parent=""#accordionExample"">
                                <div class=""accordion-body"">
                                    <strong>This is the second item's accordion body.</strong>
                                    It is hidden by default, until the collapse plugin adds the
                                    appropriate classes that we use to style each element. These
                                    classes control the overall appearance, as well as the
               ");
                WriteLiteral(@"                     showing and hiding via CSS transitions. You can modify any
                                    of this with custom CSS or overriding our default variables.
                                    It's also worth noting that just about any HTML can go
                                    within the <code>.accordion-body</code>, though the
                                    transition does limit overflow.
                                </div>
                            </div>
                        </div>
                        <div class=""accordion-item question-list"">
                            <h2 class=""accordion-header"" id=""headingThree"">
                                <button class=""accordion-button collapsed""
                                        type=""button""
                                        data-bs-toggle=""collapse""
                                        data-bs-target=""#collapseThree""
                                        aria-expanded=""false""
        ");
                WriteLiteral(@"                                aria-controls=""collapseThree"">
                                    <img class=""right-icon""
                                         src=""/image/keyboard-right-arrow-button-copy.png""
                                         alt=""right"" />
                                    Which Helperland professional will come to my place?
                                </button>
                            </h2>
                            <div id=""collapseThree""
                                 class=""accordion-collapse collapse""
                                 aria-labelledby=""headingThree""
                                 data-bs-parent=""#accordionExample"">
                                <div class=""accordion-body"">
                                    <strong>This is the third item's accordion body.</strong> It
                                    is hidden by default, until the collapse plugin adds the
                                    appropriate classes that we use to");
                WriteLiteral(@" style each element. These
                                    classes control the overall appearance, as well as the
                                    showing and hiding via CSS transitions. You can modify any
                                    of this with custom CSS or overriding our default variables.
                                    It's also worth noting that just about any HTML can go
                                    within the <code>.accordion-body</code>, though the
                                    transition does limit overflow.
                                </div>
                            </div>
                        </div>
                        <div class=""accordion-item question-list"">
                            <h2 class=""accordion-header"" id=""headingThree"">
                                <button class=""accordion-button collapsed""
                                        type=""button""
                                        data-bs-toggle=""collapse""
         ");
                WriteLiteral(@"                               data-bs-target=""#collapseFour""
                                        aria-expanded=""false""
                                        aria-controls=""collapseFour"">
                                    <img class=""right-icon""
                                         src=""/image/keyboard-right-arrow-button-copy.png""
                                         alt=""right"" />
                                    Which Helperland professional will come to my place?
                                </button>
                            </h2>
                            <div id=""collapseFour""
                                 class=""accordion-collapse collapse""
                                 aria-labelledby=""headingFour""
                                 data-bs-parent=""#accordionExample"">
                                <div class=""accordion-body"">
                                    <strong>This is the third item's accordion body.</strong> It
                                 ");
                WriteLiteral(@"   is hidden by default, until the collapse plugin adds the
                                    appropriate classes that we use to style each element. These
                                    classes control the overall appearance, as well as the
                                    showing and hiding via CSS transitions. You can modify any
                                    of this with custom CSS or overriding our default variables.
                                    It's also worth noting that just about any HTML can go
                                    within the <code>.accordion-body</code>, though the
                                    transition does limit overflow.
                                </div>
                            </div>
                        </div>
                        <div class=""accordion-item question-list"">
                            <h2 class=""accordion-header"" id=""headingThree"">
                                <button class=""accordion-button collapsed""
");
                WriteLiteral(@"                                        type=""button""
                                        data-bs-toggle=""collapse""
                                        data-bs-target=""#collapseFive""
                                        aria-expanded=""false""
                                        aria-controls=""collapseFive"">
                                    <img class=""right-icon""
                                         src=""/image/keyboard-right-arrow-button-copy.png""
                                         alt=""right"" />
                                    Which Helperland professional will come to my place?
                                </button>
                            </h2>
                            <div id=""collapseFive""
                                 class=""accordion-collapse collapse""
                                 aria-labelledby=""headingFive""
                                 data-bs-parent=""#accordionExample"">
                                <div class=""accordion-body"">
");
                WriteLiteral(@"                                    <strong>This is the third item's accordion body.</strong> It
                                    is hidden by default, until the collapse plugin adds the
                                    appropriate classes that we use to style each element. These
                                    classes control the overall appearance, as well as the
                                    showing and hiding via CSS transitions. You can modify any
                                    of this with custom CSS or overriding our default variables.
                                    It's also worth noting that just about any HTML can go
                                    within the <code>.accordion-body</code>, though the
                                    transition does limit overflow.
                                </div>
                            </div>
                        </div>
                        <div class=""accordion-item question-list"">
                      ");
                WriteLiteral(@"      <h2 class=""accordion-header"" id=""headingThree"">
                                <button class=""accordion-button collapsed""
                                        type=""button""
                                        data-bs-toggle=""collapse""
                                        data-bs-target=""#collapseSix""
                                        aria-expanded=""false""
                                        aria-controls=""collapseSix"">
                                    <img class=""right-icon""
                                         src=""/image/keyboard-right-arrow-button-copy.png""
                                         alt=""right"" />
                                    Which Helperland professional will come to my place?
                                </button>
                            </h2>
                            <div id=""collapseSix""
                                 class=""accordion-collapse collapse""
                                 aria-labelledby=""headingSix""
     ");
                WriteLiteral(@"                            data-bs-parent=""#accordionExample"">
                                <div class=""accordion-body"">
                                    <strong>This is the third item's accordion body.</strong> It
                                    is hidden by default, until the collapse plugin adds the
                                    appropriate classes that we use to style each element. These
                                    classes control the overall appearance, as well as the
                                    showing and hiding via CSS transitions. You can modify any
                                    of this with custom CSS or overriding our default variables.
                                    It's also worth noting that just about any HTML can go
                                    within the <code>.accordion-body</code>, though the
                                    transition does limit overflow.
                                </div>
                            </d");
                WriteLiteral("iv>\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"text-align: left; margin: 10px 0\">\r\n                        <a class=\"more-help\"");
                BeginWriteAttribute("href", " href=\"", 37766, "\"", 37773, 0);
                EndWriteAttribute();
                WriteLiteral(">For more help</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- PS modal ends -->\r\n    ");
#nullable restore
#line 630 "C:\Users\kbsar\source\repos\HelperLand\HelperLand\Views\Customer\BookService.cshtml"
Write(await Html.PartialAsync("footer"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n    ");
#nullable restore
#line 631 "C:\Users\kbsar\source\repos\HelperLand\HelperLand\Views\Customer\BookService.cshtml"
Write(await Html.PartialAsync("completBook"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"





    <!-- bootstrap js cdn  -->
    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js""
            integrity=""sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM""
            crossorigin=""anonymous""></script>
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js""></script>
    <script src=""/js/bookServiceScript.js""></script>

    <div class=""lds-roller ""><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
    <div class=""overlayer""></div>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n");
                WriteLiteral("        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("partial", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "8b1d6a83bc0f71f488c580012d76cef6b33ca21550892", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper.Name = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
